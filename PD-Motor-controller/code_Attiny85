/*
This is a Proportional+Derivative motor controller made using an Attiny 85 and an L293D motor controller.
The proportional_constant and derivative_constant are changed to tune the controller
The controller has two modes:
 1) servo mode:- motor works like a servo
 2) RPM mode:- works like a normal motor, but runs with a user specified RPM
*/
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
#include <avr/io.h>
#include<avr/interrupt.h>
#define F_CPU 8000000UL
#include <util/delay.h>

#define proportional_constant 5 //controls the proportional constant of the PD controller
#define derivative_constant 1  // controls the derivative constant of the PD controller

int encoder_target=24; //target position that we want motor to be in, in this case we want motor to do 24 divisions
int encoder_division=0; // no of divisions the motor has completed 
int direction=0,Time=0,temp=0,temp1=0;
int mode=0; //controls the mode of the device. 0-means motor works like a servo and 1-means it works with specific RPM
int val=0; //to store the converted ADC values
void PWM_c() //function to setup the PWM
{	TCCR0A=0x00;         
	TCCR0A|=0b10100011;
	TCCR0B=0x00;
	TCCR0B |= 0b00000101;   
	TCNT0=0;
	OCR0A=150;
}

ISR (INT0_vect) // Interrupt service routine for the external interrupt
{   if(direction==0)
	encoder_division++;
	else
	encoder_division--;
	if(encoder_target>encoder_division && mode==0)
	{direction=0;
	 temp=proportional_constant*(encoder_target-encoder_division) - derivative_constant*Time ;
	 if(temp<0)
		OCR0A=0-temp;
	 else
		OCR0A=temp;
	 OCR0B=0;
	}
	else if(encoder_target<encoder_division && mode==0)
	{direction=1;
	 temp1=proportional_constant*(encoder_division-encoder_target)-derivative_constant*Time;
	 OCR0A=0;
	 if(temp1<0)
		OCR0B=0-temp1;
	 else
		OCR0B=temp1;
	}
}



ISR (ADC_vect) // Interrupt service routine for the ADC conversion
{ val=ADCL;
  val+=(ADCH<<8);
  if(mode==0)
	encoder_target=val/3;
  ADCSRA|=0b01000000;
  if(mode==1)
    { OCR0A=val;}
}
int main(void)
{
  DDRB=0b00000011;
	sei();
	GIMSK |= 0b01000000;     //setting up the external interrupt
	MCUCR |= 0b00000010;    
	ADCSRA=0b10001111;     //setting up the ADC converter
	ADMUX=0b00000011;
	PWM_c();
	ADCSRA|=0b01000000;
    while (1) 
    {Time++;
	 if((PINB & 0b00010000)==0b00010000)
	   {mode=1;
	   }
	 else 
	   {mode=0;
	   }
    }
}
